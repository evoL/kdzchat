// Generated by CoffeeScript 1.3.3
(function() {
  var ChatApp, Message, Messages, SystemMessage, User, UserList, socket,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.configure('User', 'id', 'nick', 'current');

    User.prototype.validate = function() {
      if (!/^[\w\-]+$/.test(this.nick)) {
        return "The nick should only contain alphanumeric characters, hyphens and underscores.";
      }
      if (User.findByAttribute('nick', this.nick)) {
        return 'This user already exists.';
      }
    };

    return User;

  })(Spine.Model);

  Message = (function(_super) {

    __extends(Message, _super);

    Message.configure('Message', 'authorId', 'content');

    function Message() {
      var match;
      Message.__super__.constructor.apply(this, arguments);
      match = this.content.match(/^\/(\w+)\s+(.+)$/);
      if (match) {
        this.metadata = {
          command: match[1],
          argument: match[2]
        };
      }
    }

    Message.prototype.isSystemMessage = function() {
      return this.metadata != null;
    };

    Message.prototype.validate = function() {
      if (!User.exists(this.authorId)) {
        return "The user doesn't exist.";
      }
    };

    return Message;

  })(Spine.Model);

  SystemMessage = (function(_super) {

    __extends(SystemMessage, _super);

    function SystemMessage() {
      return SystemMessage.__super__.constructor.apply(this, arguments);
    }

    SystemMessage.configure('SystemMessage', 'authorId', 'content');

    SystemMessage.prototype.isSystemMessage = function() {
      return true;
    };

    SystemMessage.prototype.validate = function() {
      if (!User.exists(this.authorId)) {
        return "The user doesn't exist.";
      }
    };

    return SystemMessage;

  })(Spine.Model);

  socket = io.connect();

  Messages = (function(_super) {

    __extends(Messages, _super);

    function Messages() {
      this.render = __bind(this.render, this);
      Messages.__super__.constructor.apply(this, arguments);
      this.el.addClass('post');
      if (this.message.isSystemMessage()) {
        this.el.addClass('system');
      }
    }

    Messages.prototype.messageContent = function() {
      var metadata, msg, user;
      if (!this.message.isSystemMessage()) {
        return this.processMessage(this.message.content);
      }
      metadata = this.message.metadata;
      if (!metadata) {
        return this.processMessage(this.message.content);
      }
      switch (metadata.command) {
        case 'nick':
          user = User.find(this.message.authorId);
          user.nick = metadata.argument.replace(/\s+$/, '');
          if (user.save()) {
            socket.emit('change nick', {
              id: this.message.authorId,
              nick: user.nick
            });
            return "is now called " + Mustache.escape(user.nick);
          } else {
            msg = user.validate();
            return "could not change his nick. " + msg;
          }
          break;
        default:
          return "tried to use an unknown command";
      }
    };

    Messages.prototype.data = function() {
      return {
        author: User.find(this.message.authorId).nick,
        content: this.messageContent()
      };
    };

    Messages.prototype.processMessage = function(text) {
      var rx;
      rx = /((?:http|https):&#x2F;&#x2F;)?([a-z0-9-]+\.)?[a-z0-9-]+(\.[a-z]{2,6}){1,3}(&#x2F;(?:[a-z0-9.,_~#&=;%+?-]|&#x2F;)*)?/ig;
      return Mustache.escape(text).replace(rx, function(match, protocol) {
        var url;
        url = protocol != null ? match : "//" + match;
        return "<a href=\"" + url + "\" target=\"_blank\">" + match + "</a>";
      });
    };

    Messages.prototype.render = function() {
      this.html(Mustache.render($('#MessageTemplate').text(), this.data()));
      return this;
    };

    return Messages;

  })(Spine.Controller);

  UserList = (function(_super) {

    __extends(UserList, _super);

    function UserList() {
      this.render = __bind(this.render, this);
      UserList.__super__.constructor.apply(this, arguments);
      User.bind('refresh change', this.render);
    }

    UserList.prototype.data = function() {
      var _this = this;
      return {
        count: User.count(),
        users: User.all().map(function(user) {
          return {
            current: user.current,
            name: user.nick
          };
        })
      };
    };

    UserList.prototype.render = function() {
      this.html(Mustache.render($('#UserListTemplate').text(), this.data()));
      return this;
    };

    return UserList;

  })(Spine.Controller);

  ChatApp = (function(_super) {

    __extends(ChatApp, _super);

    ChatApp.prototype.elements = {
      '#ChatInput': 'input',
      '#ChatArea': 'posts',
      '.chatarea-wrapper': 'scrollArea',
      '#UserList': 'userlist'
    };

    ChatApp.prototype.events = {
      'submit #InputForm': 'submit'
    };

    function ChatApp() {
      this.addMessage = __bind(this.addMessage, this);

      var _this = this;
      ChatApp.__super__.constructor.apply(this, arguments);
      this.input.focus();
      Message.bind('create', this.addMessage);
      SystemMessage.bind('create', this.addMessage);
      this.users = new UserList({
        el: this.userlist
      });
      socket.on('connect', function() {
        return socket.emit('add user', {
          nick: _this.randomizeNick()
        }, function(data, users) {
          var uid, userdata, _results;
          _this.user = User.create({
            id: data.id,
            nick: data.nick,
            current: true
          });
          _results = [];
          for (uid in users) {
            userdata = users[uid];
            if (uid !== data.id) {
              _results.push(User.create({
                id: userdata.id,
                nick: userdata.nick,
                current: false
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      });
      socket.on('user connected', function(data) {
        data.current = false;
        if (!User.exists(data.id)) {
          User.create(data);
        }
        return SystemMessage.create({
          authorId: data.id,
          content: 'has just connected'
        });
      });
      socket.on('user disconnected', function(uid) {
        return User.destroy(uid);
      });
      socket.on('nick changed', function(data) {
        User.update(data.id, {
          nick: data.nick
        });
        return SystemMessage.create({
          authorId: data.id,
          content: 'has changed his nick from ' + data.oldNick
        });
      });
      socket.on('chat', function(msg) {
        return Message.create(msg);
      });
    }

    ChatApp.prototype.submit = function(e) {
      var msg;
      e.preventDefault();
      msg = Message.create({
        authorId: this.user.id,
        content: this.input.val()
      });
      if (!msg.isSystemMessage()) {
        socket.emit('chat', {
          content: this.input.val()
        });
      }
      return this.input.val('');
    };

    ChatApp.prototype.addMessage = function(msg) {
      var view;
      view = new Messages({
        message: msg
      });
      this.posts.append(view.render().el);
      return this.scrollArea.scrollTop(this.scrollArea.height());
    };

    ChatApp.prototype.randomizeNick = function() {
      var index;
      index = Math.floor(Math.random() * 100000);
      return "guest" + index;
    };

    return ChatApp;

  })(Spine.Controller);

  $(function() {
    return new ChatApp({
      el: $('#Viewport')
    });
  });

}).call(this);
