// Generated by CoffeeScript 1.3.3
(function() {
  var ChatApp, Message, MessageView, SystemMessage, User, UserList, UserMessage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.configure('User', 'id', 'nick', 'current');

    User.prototype.validate = function() {
      if (!/^[\w\-]+$/.test(this.nick)) {
        return "The nick should only contain alphanumeric characters, hyphens and underscores.";
      }
      if (User.findByAttribute('nick', this.nick)) {
        return 'This user already exists.';
      }
    };

    return User;

  })(Spine.Model);

  Message = (function(_super) {

    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.configure('Message', 'target', 'content');

    return Message;

  })(Spine.Model);

  UserMessage = (function(_super) {

    __extends(UserMessage, _super);

    UserMessage.configure('UserMessage', 'authorId', 'content');

    UserMessage.prototype.validate = function() {
      if (!User.exists(this.authorId)) {
        return "The user doesn't exist.";
      }
    };

    function UserMessage() {
      UserMessage.__super__.constructor.apply(this, arguments);
      this.target = User.find(this.authorId).nick;
    }

    return UserMessage;

  })(Message);

  SystemMessage = (function(_super) {

    __extends(SystemMessage, _super);

    function SystemMessage() {
      return SystemMessage.__super__.constructor.apply(this, arguments);
    }

    SystemMessage.configure('SystemMessage');

    return SystemMessage;

  })(Message);

  MessageView = (function(_super) {

    __extends(MessageView, _super);

    function MessageView() {
      this.render = __bind(this.render, this);
      MessageView.__super__.constructor.apply(this, arguments);
      this.el.addClass('post');
      if (this.message.constructor.name === 'SystemMessage') {
        this.el.addClass('system');
      }
    }

    MessageView.prototype.data = function() {
      return {
        author: this.message.target,
        content: this.processMessage(this.message.content)
      };
    };

    MessageView.prototype.processMessage = function(text) {
      var rx;
      rx = /((?:http|https):&#x2F;&#x2F;)?([a-z0-9-]+\.)?[a-z0-9-]+(\.[a-z]{2,6}){1,3}(&#x2F;(?:[a-z0-9.,_~#&=;%+?-]|&#x2F;)*)?/ig;
      return Mustache.escape(text).replace(rx, function(match, protocol) {
        var url;
        url = protocol != null ? match : "//" + match;
        return "<a href=\"" + url + "\" target=\"_blank\">" + match + "</a>";
      });
    };

    MessageView.prototype.render = function() {
      this.html(Mustache.render($('#MessageTemplate').text(), this.data()));
      return this;
    };

    return MessageView;

  })(Spine.Controller);

  UserList = (function(_super) {

    __extends(UserList, _super);

    function UserList() {
      this.render = __bind(this.render, this);
      UserList.__super__.constructor.apply(this, arguments);
      User.bind('refresh change', this.render);
    }

    UserList.prototype.data = function() {
      var _this = this;
      return {
        count: User.count(),
        users: User.all().map(function(user) {
          return {
            current: user.current,
            name: user.nick
          };
        })
      };
    };

    UserList.prototype.render = function() {
      this.html(Mustache.render($('#UserListTemplate').text(), this.data()));
      return this;
    };

    return UserList;

  })(Spine.Controller);

  ChatApp = (function(_super) {

    __extends(ChatApp, _super);

    ChatApp.prototype.elements = {
      '#ChatInput': 'input',
      '#ChatArea': 'posts',
      '.chatarea-wrapper': 'scrollArea',
      '#UserList': 'userlist'
    };

    ChatApp.prototype.events = {
      'submit #InputForm': 'submit'
    };

    function ChatApp() {
      this.addMessage = __bind(this.addMessage, this);

      var _this = this;
      ChatApp.__super__.constructor.apply(this, arguments);
      this.input.focus();
      this.unread = 0;
      this.focused = true;
      this.baseTitle = document.title;
      this.sound = new buzz.sound('/drip', {
        formats: ['ogg', 'mp3']
      });
      $(document).on({
        show: function() {
          _this.focused = true;
          return _this.focusRestored();
        },
        hide: function() {
          return _this.focused = false;
        }
      });
      UserMessage.bind('create', this.addMessage);
      SystemMessage.bind('create', this.addMessage);
      this.users = new UserList({
        el: this.userlist
      });
      this.socket = io.connect("" + location.protocol + "//" + location.hostname + ":8999");
      this.socket.on('connect', function() {
        return _this.socket.emit('add user', {
          nick: _this.getNick()
        }, function(data, users) {
          var uid, userdata, _results;
          _this.user = User.create({
            id: data.id,
            nick: data.nick,
            current: true
          });
          _results = [];
          for (uid in users) {
            userdata = users[uid];
            if (uid !== data.id) {
              _results.push(User.create({
                id: userdata.id,
                nick: userdata.nick,
                current: false
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      });
      this.socket.on('user connected', function(data) {
        data.current = false;
        if (!User.exists(data.id)) {
          User.create(data);
        }
        return SystemMessage.create({
          target: data.nick,
          content: 'has just connected'
        });
      });
      this.socket.on('user disconnected', function(data) {
        User.destroy(data.id);
        return SystemMessage.create({
          target: data.nick,
          content: 'has disconnected'
        });
      });
      this.socket.on('nick changed', function(data) {
        User.update(data.id, {
          nick: data.nick
        });
        return SystemMessage.create({
          target: data.oldNick,
          content: 'is now called ' + data.nick
        });
      });
      this.socket.on('chat', function(msg) {
        UserMessage.create(msg);
        if (!_this.focused) {
          return _this.notify();
        }
      });
    }

    ChatApp.prototype.submit = function(e) {
      var match, value;
      e.preventDefault();
      value = this.input.val();
      if (value === '') {
        return;
      }
      match = value.match(/^\/(\w+)(?:\s+(.+))?$/);
      if (match) {
        this.handleCommand({
          command: match[1],
          argument: match[2]
        });
      } else {
        UserMessage.create({
          authorId: this.user.id,
          content: value
        });
        this.socket.emit('chat', {
          content: value
        });
      }
      return this.input.val('');
    };

    ChatApp.prototype.handleCommand = function(cmd) {
      var oldNick;
      switch (cmd.command) {
        case 'nick':
          oldNick = this.user.nick;
          this.user.nick = cmd.argument.replace(/\s+$/, '');
          if (this.user.save()) {
            this.socket.emit('change nick', {
              id: this.user.id,
              nick: this.user.nick
            });
            if (localStorage) {
              localStorage.setItem('nick', this.user.nick);
            }
            return SystemMessage.create({
              target: oldNick,
              content: 'is now called ' + this.user.nick
            });
          } else {
            this.user.nick = oldNick;
            return SystemMessage.create({
              target: oldNick,
              content: 'could not change his nick. ' + this.user.validate()
            });
          }
          break;
        default:
          return SystemMessage.create({
            target: this.user.nick,
            content: 'tried to use an unknown command'
          });
      }
    };

    ChatApp.prototype.addMessage = function(msg) {
      var view;
      view = new MessageView({
        message: msg
      });
      this.posts.append(view.render().el);
      return this.scrollArea.scrollTop(this.posts.height());
    };

    ChatApp.prototype.focusRestored = function() {
      document.title = this.baseTitle;
      return this.unread = 0;
    };

    ChatApp.prototype.notify = function() {
      document.title = "(" + (++this.unread) + ") " + this.baseTitle;
      return this.sound.play();
    };

    ChatApp.prototype.getNick = function() {
      var nick;
      if (localStorage && localStorage.getItem('nick')) {
        nick = localStorage.getItem('nick');
        if (User.findByAttribute('nick', nick)) {
          return this.randomizeNick();
        } else {
          return nick;
        }
      } else {
        return this.randomizeNick();
      }
    };

    ChatApp.prototype.randomizeNick = function() {
      var index;
      index = Math.floor(Math.random() * 100000);
      return "guest" + index;
    };

    return ChatApp;

  })(Spine.Controller);

  $(function() {
    return new ChatApp({
      el: $('#Viewport')
    });
  });

}).call(this);
